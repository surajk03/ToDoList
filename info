Experiment 1
characters, words, lines in file
//Write a C Program to Scan and Count the number of characters, words, and lines in a file.

#include <stdio.h>
#include <stdlib.h>

int main()
{
    FILE * file;
    char path[100];
    char ch;
    int characters, words, lines;
    printf("Enter source file path: ");
    scanf("%s", path);
    file = fopen(path, "r");
    if (file == NULL)
    {
        printf("\nUnable to open file.\n");
        printf("Please check if file exists and you have read privilege.\n");

        exit(EXIT_FAILURE);
    }
    characters = words = lines = 0;
    while ((ch = fgetc(file)) != EOF)
    {
        characters++;
        if (ch == '\n' || ch == '\0')
            lines++;
        if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\0')
            words++;
    }
    if (characters > 0)
    {
        words++;
        lines++;
    }
    printf("\n");
    printf("Total characters = %d\n", characters);
    printf("Total words      = %d\n", words-1);
    printf("Total lines      = %d\n", lines-1);
    fclose(file);

    return 0;
}

//write a c program to read names and marks of n number of students from users and store them in a file

#include<stdio.h>
#include<stdlib.h>
int main(){
    char name[50];
    int marks,i,n;
    printf("Enter number of students:  ");
    scanf("%d",&n);
    FILE *fptr;
    fptr=(fopen("student.txt","w"));
    if(fptr==NULL){
        printf("\n Error!");
        exit(1);
    }
    for(i=0;i<n;i++){
        printf("\nFor student %d\nEnter name:  ",i+1);
        scanf("%s",name);
        printf("Enter marks:  ");
        scanf("%d",&marks);
        fprintf(fptr,"\nName: %s  \nMarks=%d  \n",name,marks);
    }
    fclose(fptr);
    return 0;
}

//Write a C program to delete a specific line from a text file

#include<stdio.h>
int main(){
    FILE *fptr1, *fptr2;
    char file1[]="file1.txt";
    char file2[]="file2.txt";
    char curr;
    int del,line_number=0;

    printf("Please enter the line number you want to delete: ");
    scanf("%d",&del);
    fptr1 = fopen(file1,"r");
    fptr2= fopen(file2,"w");
    curr=getc(fptr1);
    if(curr!=EOF){
        line_number=1;
    }
    while(1){
        if(del != line_number)
            putc(curr,fptr2);
            curr=getc(fptr1);
            if(curr=='\n')line_number++;
            if(curr==EOF) break;
    }
    fclose(fptr1);
    fclose(fptr2);
}

// write a program to copy content from one file to another

#include<stdio.h>
int main(){
    FILE *fptr1, *fptr2;
    char file1[]="file1.txt";
    char file2[]="file2.txt";
    char curr;

    fptr1=fopen(file1,"r");
    fptr2=fopen(file2,"w");

    curr=getc(fptr1);
    while(1){
        putc(curr,fptr2);
        curr=getc(fptr1);

        if(curr==EOF) break;
    }
    fclose(fptr1);
    fclose(fptr2);
}

// Write a program to detect tokens

#include<stdbool.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
bool isDelimiter(char ch)
{
    if (ch == ' ' || ch == '+' || ch == '-' || ch == '*' ||
        ch == '/' || ch == ',' || ch == ';' || ch == '>' ||
        ch == '<' || ch == '=' || ch == '(' || ch == ')' ||
        ch == '[' || ch == ']' || ch == '{' || ch == '}')
        return (true);
    return (false);
}
bool isOperator(char ch)
{
    if (ch == '+' || ch == '-' || ch == '*' ||
        ch == '/' || ch == '>' || ch == '<' ||
        ch == '=')
        return (true);
    return (false);
}
bool validIdentifier(char* str)
{
    if (str[0] == '0' || str[0] == '1' || str[0] == '2' ||
        str[0] == '3' || str[0] == '4' || str[0] == '5' ||
        str[0] == '6' || str[0] == '7' || str[0] == '8' ||
        str[0] == '9' || isDelimiter(str[0]) == true)
        return (false);
    return (true);
}
bool isKeyword(char* str)
{
    if (!strcmp(str, "if") || !strcmp(str, "else") ||
        !strcmp(str, "while") || !strcmp(str, "do") ||
        !strcmp(str, "break") ||
         !strcmp(str, "continue") || !strcmp(str, "int")
        || !strcmp(str, "double") || !strcmp(str, "float")
        || !strcmp(str, "return") || !strcmp(str, "char")
        || !strcmp(str, "case") || !strcmp(str, "char")
        || !strcmp(str, "sizeof") || !strcmp(str, "long")
        || !strcmp(str, "short") || !strcmp(str, "typedef")
        || !strcmp(str, "switch") || !strcmp(str, "unsigned")
        || !strcmp(str, "void") || !strcmp(str, "static")
        || !strcmp(str, "struct") || !strcmp(str, "goto"))
        return (true);
    return (false);
}
bool isInteger(char* str)
{
    int i, len = strlen(str);
 
    if (len == 0)
        return (false);
    for (i = 0; i < len; i++) {
        if (str[i] != '0' && str[i] != '1' && str[i] != '2'
            && str[i] != '3' && str[i] != '4' && str[i] != '5'
            && str[i] != '6' && str[i] != '7' && str[i] != '8'
            && str[i] != '9' || (str[i] == '-' && i > 0))
            return (false);
    }
    return (true);
}
bool isRealNumber(char* str)
{
    int i, len = strlen(str);
    bool hasDecimal = false;
 
    if (len == 0)
        return (false);
    for (i = 0; i < len; i++) {
        if (str[i] != '0' && str[i] != '1' && str[i] != '2'
            && str[i] != '3' && str[i] != '4' && str[i] != '5'
            && str[i] != '6' && str[i] != '7' && str[i] != '8'
            && str[i] != '9' && str[i] != '.' ||
            (str[i] == '-' && i > 0))
            return (false);
        if (str[i] == '.')
            hasDecimal = true;
    }
    return (hasDecimal);
}
char* subString(char* str, int left, int right)
{
    int i;
    char* subStr = (char*)malloc(
                  sizeof(char) * (right - left + 2));
 
    for (i = left; i <= right; i++)
        subStr[i - left] = str[i];
    subStr[right - left + 1] = '\0';
    return (subStr);
}
void parse(char* str)
{
    int left = 0, right = 0;
    int len = strlen(str);
 
    while (right <= len && left <= right) {
        if (isDelimiter(str[right]) == false)
            right++;
 
        if (isDelimiter(str[right]) == true && left == right) {
            if (isOperator(str[right]) == true)
                printf("'%c' IS AN OPERATOR\n", str[right]);
 
            right++;
            left = right;
        } else if (isDelimiter(str[right]) == true && left != right
                   || (right == len && left != right)) {
            char* subStr = subString(str, left, right - 1);
 
            if (isKeyword(subStr) == true)
                printf("'%s' IS A KEYWORD\n", subStr);
 
            else if (isInteger(subStr) == true)
                printf("'%s' IS AN INTEGER\n", subStr);
 
            else if (isRealNumber(subStr) == true)
                printf("'%s' IS A REAL NUMBER\n", subStr);
 
            else if (validIdentifier(subStr) == true
                     && isDelimiter(str[right - 1]) == false)
                printf("'%s' IS A VALID IDENTIFIER\n", subStr);
 
            else if (validIdentifier(subStr) == false
                     && isDelimiter(str[right - 1]) == false)
                printf("'%s' IS NOT A VALID IDENTIFIER\n", subStr);
            left = right;
        }
    }
    return;
}
int main()
{
     // maximum length of string is 100 here
    char str[100] = "int a = b + 1c; ";
 
    parse(str); // calling the parse function
 
    return (0);
}
.....................................................................................................................

Experiment 2
//lexical analyser
#include<string.h>
#include<ctype.h>
#include<stdio.h>
#include<conio.h>

int ch=0;
void keyword(char str[10])
{
if(strcmp("for",str)==0||strcmp("while",str)==0||strcmp("do",str)==0||strcmp("int",str)==0||
strcmp("float",str)==0||strcmp("char",str)==0||strcmp("double",str)==0||strcmp("void",str)==0||
strcmp("static",str)==0||strcmp("switch",str)==0||strcmp("case",str)==0)
{
printf("\n%s is a keyword",str);
ch=1;
}
else
printf("\n%s is an identifier",str);
}

main()
{
FILE *f1,*f2,*f3,*f4,*f5;
char c,str[10],st1[10];
int num[100],lineno=0,tokenvalue=0,i=0,j=0,k=0,len;
f1=fopen("input.txt","r");
f2=fopen("identifier.txt","w");
f3=fopen("operator.txt","w");
f5=fopen("seperator.txt","w");
f4=fopen("allkey.txt","w");

while((c=getc(f1))!=EOF)
{
    if(c=='"')
    {
       while((c=getc(f1))!=EOF)
        {
		    if(c=='"')
                    {
                        putc(c,f3);
                        goto x;
                    }
        }
    }
    x:
if(isdigit(c))
{
tokenvalue=c-'0';
c=getc(f1);
while(isdigit(c))
{
tokenvalue*=10+c-'0';

c=getc(f1);
}
num[i++]=tokenvalue;
ungetc(c,f1);
}
else if(isalpha(c))
{
putc(c,f2);
c=getc(f1);

while(isdigit(c)||isalpha(c)||c=='_'||c=='$')
{
putc(c,f2);
c=getc(f1);
}
putc(' ',f2);
ungetc(c,f1);

}
else if(c==' '||c=='\t')
printf(" ");
else if(c=='\n')
lineno++;
else if (c == '+' || c == '-' || c == '*' || c == '/' || c == '>' || c == '<' || c == '=')
putc(c,f3);
else
putc(c,f5);
}
fclose(f2);
fclose(f3);
fclose(f1);
f2=fopen("identifier.txt","r");
k=0;
while((c=getc(f2))!=EOF)
{
if(c!=' ')
str[k++]=c;
else
{
str[k]='\0';
keyword(str);
if(ch==1)
{
    fputs(str,f4);
    ch=0;
    fputs(" ",f4);
}k=0;
}
}
fclose(f2);
f3=fopen("seperators.txt","r");
while((c=getc(f3))!=EOF)
printf("%c",c);
printf("\n");
fclose(f3);
printf("Total no. of lines are:%d",lineno);
fclose(f4);
getch();
}
..........................................................................................................................
Experiment 3 : comment lines
// identify all comment lines

#include<stdio.h>
int main()
{
    FILE*fp=fopen("file3.txt","r");
    FILE*fp2=fopen("file4.txt","w");
    char ch=fgetc(fp);
    while(ch!=EOF)
    {
        if(ch=='/')
        {
            fputc(ch,fp2);
            ch=fgetc(fp);
            if(ch=='/')
            {
                while(ch!='\n')
                {
                    fputc(ch,fp2);
                    ch=fgetc(fp);
                }
                fputc('\n',fp2);
            }
            else if(ch=='*')
            {
                while(ch!='/')
                {
                    fputc(ch,fp2);
                    ch=fgetc(fp);
                }
                fputc('/',fp2);
                fputc('\n',fp2);
            }
            
        }
        ch=fgetc(fp);
    }
    fclose(fp);
    fclose(fp2);
    return(0);
}

..........................................................................................................................
Experiment 4
/********************** LEX PROGRAMS***************/

// vowel or not.

%{
#include<stdio.h>
int vowel=0,con=0;
%}
%%
[aeiouAEIOU] {vowel++;}
[a-zA-z] {con++;}
"\n" {return 0;}
%%
int yywrap()
{
 return 1;
}

int main()
{
	printf("Enter string : ");
	yylex();
	printf("No of vowels: %d\n",vowel);
	printf("No of Consonant: %d\n",con);
	return 0;
}

/***********************************************************************/ 
// Program to find Capital letters

%{
#include<stdio.h>
%}
%%
[A-Z] {printf("%c ",yytext[0]);}
.;
%%
int yywrap()
{
return 1;
}
int main()
{
	printf("Enter a string: ");
	yylex();
}

/***********************************************************************/ 

// count the number of lines,  tabs, and spaces used in the input.

%{
#include<stdio.h>
int lc=0,sc=0,tc=0,ch=0,wc=0;	
%}
%%
[\n] { lc++; ch+=yyleng;}
[ \t] { sc++; ch+=yyleng;}
[^\t] { tc++; ch+=yyleng;}
[^\t\n ]+ { wc++; ch+=yyleng;}
%%
int yywrap(){ return 1; }
int main(){
	printf("Enter the Sentence : ");
	yylex();
	printf("Number of lines : %d\n",lc);
	printf("Number of spaces : %d\n",sc);
	printf("Number of tabs, words, charc : %d , %d , %d\n",tc,wc,ch);
	return 0;
}


/************************************************************************/
// take input from a file and remove multiple spaces,
// newline and tab and write output in a separate file.

%{
#include<stdio.h>
%}
%%
[\t" "]+ fprintf(yyout," ");		
.\n fprintf(yyout,"%s",yytext);	
%%
int yywrap()
{
return 1;
}
int main()
{
yyin=fopen("input.txt","r");		
yyout=fopen("output.txt","w");
yylex();
return 0;
}

/************************************************************************/

Experiment 5 : lexical analyzer for validating operators

#include<stdio.h>
//#include<conio.h>
void main(){
    char s[5];
    printf("enter any operator");
    gets(s);
    switch(s[0]){
        case'>':if(s[1]=='=')
                printf("\ngreater than or equal");
                else
                printf("\ngreater than");
                break;
        case'<':if(s[1]=='=')
                printf("\nless than or equal");
                else
                printf("\nless than");
                break;
        case'=':if(s[1]=='=')
                printf("\nEqual to");
                else
                printf("\nassignment");
                break;
        case'!':if(s[1]=='=')
                printf("\nnot equal to");
                else
                printf("\nBit not");
                break;
        case'&':if(s[1]=='&')
                printf("\nlogical and");
                else
                printf("\nbitwise and");
                break;
        case'|':if(s[1]=='|')
                printf("\n logical or");
                else
                printf("\n bitwise or");
                break;
        case'+':printf("\naddition");
                break;
        case'-':printf("\nsubtraction");
                break;
        case'*':printf("\nmultiplication");
                break;
        case'/':printf("\ndivision");
                break;
        case'%':printf("\nmodulus");
                break;
        default:printf("\nnot a valid operator");
    }
    //getch();
}
....................................................................................................................

Experiment 6
// write a C program to recognize strings under a*, a*b+, abb

#include <stdio.h>
#include <conio.h>

int main()
{
    char s[20], c;
    int state = 0, i = 0;
    printf("\n Enter a string:");
    gets(s);
    while (s[i] != '\0')
    {
        switch (state)
        {
        case 0:
            c = s[i++];
            if (c == 'a')
                state = 1;
            else if (c == 'b')
                state = 2;
            else
                state = 6;
            break;
        case 1:
            c = s[i++];
            if (c == 'a')
                state = 3;
            else if (c == 'b')
                state = 4;
            else
                state = 6;
            break;
        case 2:
            c = s[i++];
            if (c == 'a')
                state = 6;
            else if (c == 'b')
                state = 2;
            else
                state = 6;
            break;
        case 3:
            c = s[i++];
            if (c == 'a')
                state = 3;
            else if (c == 'b')
                state = 2;
            else
                state = 6;
            break;
        case 4:
            c = s[i++];
            if (c == 'a')
                state = 6;
            else if (c == 'b')
                state = 5;
            else
                state = 6;
            break;
        case 5:
            c = s[i++];
            if (c == 'a')
                state = 6;
            else if (c == 'b')
                state = 2;
            else
                state = 6;
            break;
        case 6:
            printf("\n %s is not recognised.", s);
            return 0;
        }
    }
    if (state == 1)
        printf("\n %s is accepted under rule 'a'", s);
    else if ((state == 2) || (state == 4))
        printf("\n %s is accepted under rule 'a*b+'", s);
    else if (state == 5)
        printf("\n %s is accepted under rule 'abb'", s);
    return 0;
}
..............................................................................................
Experiment 8 : yaac

%{
  /* Definition section */
  #include<stdio.h>
  #include <stdlib.h>
  void yyerror(const char *str) 
  {
   printf("\nSequence Rejected\n");        
  }
  
%}
  
%token ZERO ONE
  
/* Rule Section */
%%
  
r : s {printf("\nSequence Accepted\n\n");}
;
  
s : n
| ZERO a
| ONE b
;
  
a : n a
| ZERO
;
  
b : n b
| ONE
;
  
n : ZERO
| ONE
;
  
%%
  
#include"lex.yy.c"
//driver code
int main() 
 {
    printf("\nEnter Sequence of Zeros and Ones : ");
    yyparse();
    printf("\n");
    return 0;
 }




%{
   /* Definition section */
  #include<stdio.h>
  int flag=0;
%}
  
%token NUMBER
  
%left '+' '-'
  
%left '*' '/' '%'
  
%left '(' ')'
  
/* Rule Section */
%%
  
ArithmeticExpression: E{
  
         printf("\nResult=%d\n", $$);
  
         return 0;
  
        };
 E:E'+'E {$$=$1+$3;}
  
 |E'-'E {$$=$1-$3;}
  
 |E''E {$$=$1$3;}
  
 |E'/'E {$$=$1/$3;}
  
 |E'%'E {$$=$1%$3;}
  
 |'('E')' {$$=$2;}
  
 | NUMBER {$$=$1;}
  
 ;
  
%%
  
//driver code
void main()
{
   printf("\nEnter Any Arithmetic Expression which 
                   can have operations Addition, 
                   Subtraction, Multiplication, Division, 
                          Modulus and Round brackets:\n");
  
   yyparse();
   if(flag==0)
   printf("\nEntered arithmetic expression is Valid\n\n");
}
  
void yyerror()
{
   printf("\nEntered arithmetic expression is Invalid\n\n");
   flag=1;
}
...........................................................................................................
Experiment 9 : LALR bottom up parsing

// C program for LALR Parser

#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>
void push(char *, int *, char);
char stacktop(char *);
void isproduct(char, char);
int ister(char);
int isnter(char);
int isstate(char);
void error();
void isreduce(char, char);
char pop(char *, int *);
void printt(char *, int *, char[], int);
void rep(char[], int);
struct action
{
    char row[6][5];
};
const struct action A[12] = {
    {"sf", "emp", "emp", "se", "emp", "emp"},
    {"emp", "sg", "emp", "emp", "emp", "acc"},
    {"emp", "rc", "sh", "emp", "rc", "rc"},
    {"emp", "re", "re", "emp", "re", "re"},
    {"sf", "emp", "emp", "se", "emp", "emp"},
    {"emp", "rg", "rg", "emp", "rg", "rg"},
    {"sf", "emp", "emp", "se", "emp", "emp"},
    {"sf", "emp", "emp", "se", "emp", "emp"},
    {"emp", "sg", "emp", "emp", "sl", "emp"},
    {"emp", "rb", "sh", "emp", "rb", "rb"},
    {"emp", "rb", "rd", "emp", "rd", "rd"},
    {"emp", "rf", "rf", "emp", "rf", "rf"}
};
struct gotol
{
    char r[3][4];
};
const struct gotol G[12] = {
    {"b", "c", "d"},
    {"emp", "emp", "emp"},
    {"emp", "emp", "emp"},
    {"emp", "emp", "emp"},
    {"i", "c", "d"},
    {"emp", "emp", "emp"},
    {"emp", "j", "d"},
    {"emp", "emp", "k"},
    {"emp", "emp", "emp"},
    {"emp", "emp", "emp"},
};
char ter[6] = {'i', '+', '*', ')', '(', '$'};
char nter[3] = {'E', 'T', 'F'};
char states[12] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'm', 'j', 'k', 'l'};
char stack[100];
int top = -1;
char temp[10];
struct grammar
{
    char left;
    char right[5];
};
const struct grammar rl[6] = {
    {'E', "e+T"},
    {'E', "T"},
    {'T', "T*F"},
    {'T', "F"},
    {'F', "(E)"},
    {'F', "i"},
};
void main()
{
    char inp[80], x, p, dl[80], y, bl = 'a';
    int i = 0, j, k, l, n, m, c, len;
    printf(" Enter the input :");
    scanf("%s", inp);
    len = strlen(inp);
    inp[len] = '$';
    inp[len + 1] = '\0';
    push(stack, &top, bl);
    printf("\n stack \t\t\t input");
    printt(stack, &top, inp, i);
    do
    {
        x = inp[i];
        p = stacktop(stack);
        isproduct(x, p);
        if (strcmp(temp, "emp") == 0)
            error();
        if (strcmp(temp, "acc") == 0)
            break;
        else
        {
            if (temp[0] == 's')
            {
                push(stack, &top, inp[i]);
                push(stack, &top, temp[1]);
                i++;
            }
            else
            {
                if (temp[0] == 'r')
                {
                    j = isstate(temp[1]);
                    strcpy(temp, rl[j - 2].right);
                    dl[0] = rl[j - 2].left;
                    dl[1] = '\0';
                    n = strlen(temp);
                    for (k = 0; k < 2 * n; k++)
                        pop(stack, &top);
                    for (m = 0; dl[m] != '\0'; m++)
                        push(stack, &top, dl[m]);
                    l = top;
                    y = stack[l - 1];
                    isreduce(y, dl[0]);
                    for (m = 0; temp[m] != '\0'; m++)
                        push(stack, &top, temp[m]);
                }
            }
        }
        printt(stack, &top, inp, i);
    } while (inp[i] != '\0');
    if (strcmp(temp, "acc") == 0)
        printf(" \n accept the input ");
    else
        printf(" \n do not accept the input ");
    getch();
}
void push(char *s, int *sp, char item)
{
    if (*sp == 100)
        printf(" stack is full ");
    else
    {
        *sp = *sp + 1;
        s[*sp] = item;
    }
}
char stacktop(char *s)
{
    char i;
    i = s[top];
    return i;
}
void isproduct(char x, char p)
{
    int k, l;
    k = ister(x);
    l = isstate(p);
    strcpy(temp, A[l - 1].row[k - 1]);
}
int ister(char x)
{
    int i;
    for (i = 0; i < 6; i++)
        if (x == ter[i])
            return i + 1;
    return 0;
}
int isnter(char x)
{
    int i;
    for (i = 0; i < 3; i++)
        if (x == nter[i])
            return i + 1;
    return 0;
}
int isstate(char p)
{
    int i;
    for (i = 0; i < 12; i++)
        if (p == states[i])
            return i + 1;
    return 0;
}
void error()
{
    printf(" error in the input ");
    return ;
}
void isreduce(char x, char p)
{
    int k, l;
    k = isstate(x);
    l = isnter(p);
    strcpy(temp, G[k - 1].r[l - 1]);
}
char pop(char *s, int *sp)
{
    char item;
    if (*sp == -1)
        printf(" stack is empty ");
    else
    {
        item = s[*sp];
        *sp = *sp - 1;
    }
    return item;
}
void printt(char *t, int *p, char inp[], int i)
{
    int r;
    printf("\n");
    for (r = 0; r <= *p; r++)
        rep(t, r);
    printf("\t\t\t");
    for (r = i; inp[r] != '\0'; r++)
        printf("%c", inp[r]);
}
void rep(char t[], int r)
{
    char c;
    c = t[r];
    switch (c)
    {
    case 'a':
        printf("0");
        break;
    case 'b':
        printf("1");
        break;
    case 'c':
        printf("2");
        break;
    case 'd':
        printf("3");
        break;
    case 'e':
        printf("4");
        break;
    case 'f':
        printf("5");
        break;
    case 'g':
        printf("6");
        break;
    case 'h':
        printf("7");
        break;
    case 'm':
        printf("8");
        break;
    case 'j':
        printf("9");
        break;
    case 'k':
        printf("10");
        break;
    case 'l':
        printf("11");
        break;
    default:
        printf("%c", t[r]);
        break;
    }
}

.........................................................................................................
Experiment 10 : shift reduce parser

// Shift Reduce Parser

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int z = 0, i = 0, j = 0, c = 0;
char a[16], ac[20], stk[15], act[10];

void check()
{
	strcpy(ac,"REDUCE TO E -> ");
	for(z = 0; z < c; z++)
	{
		if(stk[z] == '4')
		{
			printf("%s4", ac);
			stk[z] = 'E';
			stk[z + 1] = '\0';
			
			printf("\n$%s\t%s$\t", stk, a);
		}
	}
		
	for(z = 0; z < c - 2; z++)
	{
		if(stk[z] == '2' && stk[z + 1] == 'E' &&
								stk[z + 2] == '2')
		{
			printf("%s2E2", ac);
			stk[z] = 'E';
			stk[z + 1] = '\0';
			stk[z + 2] = '\0';
			printf("\n$%s\t%s$\t", stk, a);
			i = i - 2;
		}	
	}
		
	for(z=0; z<c-2; z++)
	{
		if(stk[z] == '3' && stk[z + 1] == 'E' &&
								stk[z + 2] == '3')
		{
			printf("%s3E3", ac);
			stk[z]='E';
			stk[z + 1]='\0';
			stk[z + 1]='\0';
			printf("\n$%s\t%s$\t", stk, a);
			i = i - 2;
		}
	}
	return ; 
}

int main()
{
	printf("GRAMMAR is -\nE->2E2 \nE->3E3 \nE->4\n");
	strcpy(a,"32423");
	c=strlen(a);
	
	strcpy(act,"SHIFT");
	
	printf("\nstack \t input \t action");
	printf("\n$\t%s$\t", a);
	
	for(i = 0; j < c; i++, j++)
	{
		printf("%s", act);
		stk[i] = a[j];	
		stk[i + 1] = '\0';
		a[j]=' ';
		printf("\n$%s\t%s$\t", stk, a);
		check();
	}
	check();
	
	if(stk[0] == 'E' && stk[1] == '\0')
		printf("Accept\n");
	else 
		printf("Reject\n");
}
.........................................................................................................................
Experiment 11 : opearator precedence

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<conio.h>
char str[50],opstr[75];
int f[2][9]={2,3,4,4,4,0,6,6,0,1,1,3,3,5,5,0,5,0};
int col,col1,col2;
char c;
void swt(){
    switch(c){
        case'+':col=0;break;
        case'-':col=1;break;
        case'*':col=2;break;
        case'/':col=3;break;
        case'^':col=4;break;
        case'(':col=5;break;
        case')':col=6;break;
        case'd':col=7;break;
        case'$':col=8;break;
        default:printf("\nterminal mismatch");
                //exit(0);
                break;
    }
}

void main(){
    int i=0,j=0,col1,cn,k=0;
    int t1=0,foundg=0;
    char temp[20];
    //clrscr();
    printf("\n enter arithmetic expression:");
    scanf("%s",str);
    while(str[i]!='\0')
        i++;
    str[i]='$';
    str[++i]='\0';
    printf("%s\n",str);
    come:
    i=0;
    opstr[0]='$';
    swt();
    col1=col;
    c=str[i];
    swt();
    col2=col;
    if(f[1][col1]>f[2][col2]){
        opstr[j]='>';
        j++;
    }
    else if(f[1][col1]<f[2][col2]){
        opstr[j]='<';
        j++;
    }
    else{
        opstr[j]='=';
        j++;
    }
    while(str[i]!='$'){
        c=str[i];
        swt();
        col1=col;
        c=str[++i];
        swt();
        col2=col;
        opstr[j]=str[--i];
        j++;
        if(f[0][col1]>f[1][col2]){
            opstr[j]='>';
            j++;
        }
        else if(f[0][col1]<f[1][col2]){
            opstr[j]='<';
            j++;
        }
        else{
            opstr[j]='=';j++;
        }
        i++;
    }
    opstr[j]='$';
    opstr[++j]='\0';
    printf("\nPrecedence input:%s\n",opstr);
    i=0;
    j=0;
    while(opstr[i]!='\0'){
        foundg=0;
        while(foundg!=1){
            if(opstr[i]=='\0')goto redone;
            if(opstr[i]=='>')foundg=1;
            t1=i;
            i++;
        }
        if(foundg==1)
        for(i=t1;i>0;i--)
        if(opstr[i]=='<')break;
        if(i==0){
            printf("\nerror");
            exit(1);
        }
        cn=i;
        j=0;
        i=t1+1;
        while(opstr[i]!='\0'){
            temp[j]=opstr[i];
            j++;i++;
        }
        temp[j]='\0';
        opstr[cn]='E';
        opstr[++cn]='\0';
        strcat(opstr,str);
        printf("\n%s",opstr);
        i=1;
    }
    redone:k=0;
    while(opstr[k]!='\0'){
        k++;
        if(opstr[k]=='<'){
            printf("\nerror");
            exit(1);
        }
    }
    if((opstr[0]=='$')&&(opstr[2]=='$'))goto sue;
    i=1;
    while(opstr[i]!='\0'){
        c=opstr[i];
        if(c=='+'||c=='/'||c=='*'||c=='$'){
            temp[j]=c;
            j++;
        }
        i++;
    }
    temp[j]='\0';
    strcpy(str,temp);
    goto come;
    sue:
    printf("\n success");
    //return 0;
}
